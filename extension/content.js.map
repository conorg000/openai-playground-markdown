{"version":3,"file":"content.js","mappings":"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","sources":["webpack://empty-project/./node_modules/marked/lib/marked.esm.js","webpack://empty-project/./src/index.js"],"sourcesContent":["/**\n * marked v14.1.3 - a markdown parser\n * Copyright (c) 2011-2024, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null,\n    };\n}\nlet _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape$1(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        },\n    };\n    return obj;\n}\nfunction cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch {\n        return null;\n    }\n    return href;\n}\nconst noopTest = { exec: () => null };\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape$1(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text),\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape$1(text),\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0],\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^(?: {1,4}| {0,3}\\t)/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text,\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text,\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: rtrim(cap[0], '\\n'),\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            let lines = rtrim(cap[0], '\\n').split('\\n');\n            let raw = '';\n            let text = '';\n            const tokens = [];\n            while (lines.length > 0) {\n                let inBlockquote = false;\n                const currentLines = [];\n                let i;\n                for (i = 0; i < lines.length; i++) {\n                    // get lines up to a continuation\n                    if (/^ {0,3}>/.test(lines[i])) {\n                        currentLines.push(lines[i]);\n                        inBlockquote = true;\n                    }\n                    else if (!inBlockquote) {\n                        currentLines.push(lines[i]);\n                    }\n                    else {\n                        break;\n                    }\n                }\n                lines = lines.slice(i);\n                const currentRaw = currentLines.join('\\n');\n                const currentText = currentRaw\n                    // precede setext continuation with 4 spaces so it isn't a setext\n                    .replace(/\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g, '\\n    $1')\n                    .replace(/^ {0,3}>[ \\t]?/gm, '');\n                raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n                text = text ? `${text}\\n${currentText}` : currentText;\n                // parse blockquote lines as top level tokens\n                // merge paragraphs if this is a continuation\n                const top = this.lexer.state.top;\n                this.lexer.state.top = true;\n                this.lexer.blockTokens(currentText, tokens, true);\n                this.lexer.state.top = top;\n                // if there is no continuation then we are done\n                if (lines.length === 0) {\n                    break;\n                }\n                const lastToken = tokens[tokens.length - 1];\n                if (lastToken?.type === 'code') {\n                    // blockquote continuation cannot be preceded by a code block\n                    break;\n                }\n                else if (lastToken?.type === 'blockquote') {\n                    // include continuation in nested blockquote\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.blockquote(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n                    break;\n                }\n                else if (lastToken?.type === 'list') {\n                    // include continuation in nested list\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.list(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n                    lines = newText.substring(tokens[tokens.length - 1].raw.length).split('\\n');\n                    continue;\n                }\n            }\n            return {\n                type: 'blockquote',\n                raw,\n                tokens,\n                text,\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: [],\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                let raw = '';\n                let itemContents = '';\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let blankLine = !line.trim();\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else if (blankLine) {\n                    indent = cap[1].length + 1;\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                if (blankLine && /^[ \\t]*$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    const htmlBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}<[a-z].*>`, 'i');\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        let nextLineWithoutTabs;\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                            nextLineWithoutTabs = nextLine;\n                        }\n                        else {\n                            nextLineWithoutTabs = nextLine.replace(/\\t/g, '    ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of html block\n                        if (htmlBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(nextLine)) {\n                            break;\n                        }\n                        if (nextLineWithoutTabs.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.replace(/\\t/g, '    ').search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLineWithoutTabs.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n[ \\t]*\\n[ \\t]*$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: [],\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = list.items[list.items.length - 1].raw.trimEnd();\n            list.items[list.items.length - 1].text = list.items[list.items.length - 1].text.trimEnd();\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0],\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title,\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!/[:|]/.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(/^\\||\\| *$/g, '').split('|');\n        const rows = cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: [],\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (/^ *-+: *$/.test(align)) {\n                item.align.push('right');\n            }\n            else if (/^ *:-+: *$/.test(align)) {\n                item.align.push('center');\n            }\n            else if (/^ *:-+ *$/.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (let i = 0; i < headers.length; i++) {\n            item.header.push({\n                text: headers[i],\n                tokens: this.lexer.inline(headers[i]),\n                header: true,\n                align: item.align[i],\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell),\n                    header: false,\n                    align: item.align[i],\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1]),\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0]),\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape$1(cap[1]),\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0],\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text,\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text),\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text),\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape$1(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text,\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0],\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2]),\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape$1(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = escape$1(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = cap[0];\n            }\n            else {\n                text = escape$1(cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text,\n            };\n        }\n    }\n}\n\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?:[ \\t]*(?:\\n|$))+/;\nconst blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheading = edit(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText,\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex(),\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex(),\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = '\\\\p{P}\\\\p{S}';\nconst punctuation = edit(/^((?![*_])[\\spunctuation])/, 'u')\n    .replace(/punctuation/g, _punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)[punct](_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter\n    + '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\([punct])/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest,\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    escape: edit(escape).replace('])', '~|])').getRegex(),\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex(),\n};\n/**\n * exports\n */\nconst block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic,\n};\nconst inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic,\n};\n\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true,\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal,\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline,\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = [], lastParagraphClipped = false) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title,\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    parser; // set by the parser\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(token) {\n        return '';\n    }\n    code({ text, lang, escaped }) {\n        const langString = (lang || '').match(/^\\S*/)?.[0];\n        const code = text.replace(/\\n$/, '') + '\\n';\n        if (!langString) {\n            return '<pre><code>'\n                + (escaped ? code : escape$1(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape$1(langString)\n            + '\">'\n            + (escaped ? code : escape$1(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote({ tokens }) {\n        const body = this.parser.parse(tokens);\n        return `<blockquote>\\n${body}</blockquote>\\n`;\n    }\n    html({ text }) {\n        return text;\n    }\n    heading({ tokens, depth }) {\n        return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n    }\n    hr(token) {\n        return '<hr>\\n';\n    }\n    list(token) {\n        const ordered = token.ordered;\n        const start = token.start;\n        let body = '';\n        for (let j = 0; j < token.items.length; j++) {\n            const item = token.items[j];\n            body += this.listitem(item);\n        }\n        const type = ordered ? 'ol' : 'ul';\n        const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(item) {\n        let itemBody = '';\n        if (item.task) {\n            const checkbox = this.checkbox({ checked: !!item.checked });\n            if (item.loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                    }\n                }\n                else {\n                    item.tokens.unshift({\n                        type: 'text',\n                        raw: checkbox + ' ',\n                        text: checkbox + ' ',\n                    });\n                }\n            }\n            else {\n                itemBody += checkbox + ' ';\n            }\n        }\n        itemBody += this.parser.parse(item.tokens, !!item.loose);\n        return `<li>${itemBody}</li>\\n`;\n    }\n    checkbox({ checked }) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph({ tokens }) {\n        return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n    }\n    table(token) {\n        let header = '';\n        // header\n        let cell = '';\n        for (let j = 0; j < token.header.length; j++) {\n            cell += this.tablecell(token.header[j]);\n        }\n        header += this.tablerow({ text: cell });\n        let body = '';\n        for (let j = 0; j < token.rows.length; j++) {\n            const row = token.rows[j];\n            cell = '';\n            for (let k = 0; k < row.length; k++) {\n                cell += this.tablecell(row[k]);\n            }\n            body += this.tablerow({ text: cell });\n        }\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow({ text }) {\n        return `<tr>\\n${text}</tr>\\n`;\n    }\n    tablecell(token) {\n        const content = this.parser.parseInline(token.tokens);\n        const type = token.header ? 'th' : 'td';\n        const tag = token.align\n            ? `<${type} align=\"${token.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong({ tokens }) {\n        return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n    }\n    em({ tokens }) {\n        return `<em>${this.parser.parseInline(tokens)}</em>`;\n    }\n    codespan({ text }) {\n        return `<code>${text}</code>`;\n    }\n    br(token) {\n        return '<br>';\n    }\n    del({ tokens }) {\n        return `<del>${this.parser.parseInline(tokens)}</del>`;\n    }\n    link({ href, title, tokens }) {\n        const text = this.parser.parseInline(tokens);\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image({ href, title, text }) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(token) {\n        return 'tokens' in token && token.tokens ? this.parser.parseInline(token.tokens) : token.text;\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong({ text }) {\n        return text;\n    }\n    em({ text }) {\n        return text;\n    }\n    codespan({ text }) {\n        return text;\n    }\n    del({ text }) {\n        return text;\n    }\n    html({ text }) {\n        return text;\n    }\n    text({ text }) {\n        return text;\n    }\n    link({ text }) {\n        return '' + text;\n    }\n    image({ text }) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.renderer.parser = this;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[anyToken.type]) {\n                const genericToken = anyToken;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'space': {\n                    out += this.renderer.space(token);\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr(token);\n                    continue;\n                }\n                case 'heading': {\n                    out += this.renderer.heading(token);\n                    continue;\n                }\n                case 'code': {\n                    out += this.renderer.code(token);\n                    continue;\n                }\n                case 'table': {\n                    out += this.renderer.table(token);\n                    continue;\n                }\n                case 'blockquote': {\n                    out += this.renderer.blockquote(token);\n                    continue;\n                }\n                case 'list': {\n                    out += this.renderer.list(token);\n                    continue;\n                }\n                case 'html': {\n                    out += this.renderer.html(token);\n                    continue;\n                }\n                case 'paragraph': {\n                    out += this.renderer.paragraph(token);\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = this.renderer.text(textToken);\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + this.renderer.text(textToken);\n                    }\n                    if (top) {\n                        out += this.renderer.paragraph({\n                            type: 'paragraph',\n                            raw: body,\n                            text: body,\n                            tokens: [{ type: 'text', raw: body, text: body }],\n                        });\n                    }\n                    else {\n                        out += body;\n                    }\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[anyToken.type]) {\n                const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'escape': {\n                    out += renderer.text(token);\n                    break;\n                }\n                case 'html': {\n                    out += renderer.html(token);\n                    break;\n                }\n                case 'link': {\n                    out += renderer.link(token);\n                    break;\n                }\n                case 'image': {\n                    out += renderer.image(token);\n                    break;\n                }\n                case 'strong': {\n                    out += renderer.strong(token);\n                    break;\n                }\n                case 'em': {\n                    out += renderer.em(token);\n                    break;\n                }\n                case 'codespan': {\n                    out += renderer.codespan(token);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br(token);\n                    break;\n                }\n                case 'del': {\n                    out += renderer.del(token);\n                    break;\n                }\n                case 'text': {\n                    out += renderer.text(token);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    block;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens',\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n    /**\n     * Provide function to tokenize markdown\n     */\n    provideLexer() {\n        return this.block ? _Lexer.lex : _Lexer.lexInline;\n    }\n    /**\n     * Provide function to parse tokens\n     */\n    provideParser() {\n        return this.block ? _Parser.parse : _Parser.parseInline;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.parseMarkdown(true);\n    parseInline = this.parseMarkdown(false);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (['options', 'parser'].includes(prop)) {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (['options', 'block'].includes(prop)) {\n                        // ignore options and block properties\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    parseMarkdown(blockType) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const parse = (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            const throwError = this.onError(!!opt.silent, !!opt.async);\n            // throw error if an extension set async to true but parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n            }\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n                opt.hooks.block = blockType;\n            }\n            const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n            const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n        return parse;\n    }\n    onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape$1(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n//# sourceMappingURL=marked.esm.js.map\n","import { marked } from 'marked';\nconst target_div = \".GCWeG\";\nconst DEBOUNCE_DELAY = 700; // Adjust the delay as needed based on content streaming behavior\n\n// Array to keep track of processed elements\nconst processedElements = [];\n\n// **Global toggle state**\nlet isParsingToggledOff = false; // false indicates parsing is toggled on (parsed markdown is shown)\n\n// Function to convert Markdown and apply it to the parsedDiv\nfunction updateParsedMarkdown(element) {\n    let markdownContent = element.innerText || element.textContent;\n\n    // Remove ```markdown code fences at the start and end if present\n    if (markdownContent.startsWith('```markdown')) {\n        markdownContent = markdownContent.replace(/^```markdown\\s*\\n?/, '');\n        markdownContent = markdownContent.replace(/\\n?```$/, '');\n    }\n\n    const htmlContent = marked(markdownContent);\n\n    // Update the parsedDiv's content\n    if (element.__parsedDiv) {\n        element.__parsedDiv.innerHTML = htmlContent;\n\n        // Adjust pre elements inside parsedDiv\n        const preElements = element.__parsedDiv.querySelectorAll('pre');\n        preElements.forEach(pre => {\n            pre.style.fontSize = '0.8rem';\n        });\n\n        // Adjust code elements inside parsedDiv\n        const codeElements = element.__parsedDiv.querySelectorAll('code');\n        codeElements.forEach(codeElem => {\n            codeElem.style.width = '-webkit-fill-available';\n        });\n    }\n}\n\n// Function to handle edits to the original element\nfunction monitorOriginalElementForChanges(element) {\n    // If an observer already exists, disconnect it\n    if (element.__editObserver) {\n        element.__editObserver.disconnect();\n    }\n\n    // Create a MutationObserver to detect changes in the element's text content\n    const observer = new MutationObserver(mutationsList => {\n        // Use a debounce mechanism to avoid rapid reprocessing\n        clearTimeout(element.__editDebounceTimer);\n        element.__editDebounceTimer = setTimeout(() => {\n            console.log('Detected changes in original element. Updating parsed markdown.');\n            updateParsedMarkdown(element);\n        }, 300); // Adjust debounce delay as needed\n    });\n\n    // Start observing the element for character data changes\n    observer.observe(element, {\n        characterData: true,\n        subtree: true,\n        childList: true,\n    });\n\n    // Store the observer on the element for later disconnection\n    element.__editObserver = observer;\n}\n\n// Function to convert Markdown and apply it to the element\nfunction convertMarkdownToHTML(element) {\n    // Check if we've already processed this element\n    if (element.__processed) {\n        return;\n    }\n    element.__processed = true;\n\n    // Store the original element (reference)\n    if (!element.__originalElement) {\n        element.__originalElement = element; // Reference to the original element\n    }\n\n    let markdownContent = element.innerText || element.textContent;\n\n    // Remove ```markdown code fences at the start and end if present\n    if (markdownContent.startsWith('```markdown')) {\n        markdownContent = markdownContent.replace(/^```markdown\\s*\\n?/, '');\n        markdownContent = markdownContent.replace(/\\n?```$/, '');\n    }\n\n    const htmlContent = marked(markdownContent);\n\n    // Create a new div to hold the parsed content\n    const parsedDiv = document.createElement('div');\n    parsedDiv.className = 'parsed-markdown';\n    parsedDiv.innerHTML = htmlContent;\n\n    // Adjust pre elements inside parsedDiv\n    const preElements = parsedDiv.querySelectorAll('pre');\n    preElements.forEach(pre => {\n        pre.style.fontSize = '0.8rem';\n    });\n\n    // Adjust code elements inside parsedDiv\n    const codeElements = parsedDiv.querySelectorAll('code');\n    codeElements.forEach(codeElem => {\n        codeElem.style.width = '-webkit-fill-available';\n    });\n\n    // **Set initial visibility based on the global toggle state**\n    if (isParsingToggledOff) {\n        // Parsing is toggled off globally; show original, hide parsed markdown\n        element.style.display = '';\n        parsedDiv.style.display = 'none';\n\n        // Start monitoring for changes\n        monitorOriginalElementForChanges(element);\n    } else {\n        // Parsing is toggled on globally; show parsed markdown, hide original\n        element.style.display = 'none';\n        parsedDiv.style.display = '';\n    }\n\n    // Insert parsedDiv into the DOM after the original element\n    element.parentNode.insertBefore(parsedDiv, element.nextSibling);\n\n    // Store the parsedDiv in element.__parsedDiv\n    element.__parsedDiv = parsedDiv;\n\n    // Keep track of the element\n    if (!processedElements.includes(element)) {\n        processedElements.push(element);\n    }\n\n    // Initialize the toggle state based on the global state\n    element.__isMarkdownToggled = isParsingToggledOff; // true if parsing is toggled off\n}\n\n// Function to monitor a target div until its streaming content is fully loaded\nfunction monitorStreamingContent(element) {\n    let debounceTimer;\n\n    // Callback function for the MutationObserver monitoring the element's content\n    const contentObserverCallback = (mutationsList, observer) => {\n        // Whenever a mutation occurs, reset the debounce timer\n        clearTimeout(debounceTimer);\n\n        // Set a new debounce timer\n        debounceTimer = setTimeout(() => {\n            // Content has stopped changing for DEBOUNCE_DELAY milliseconds\n            // We can now process the markdown\n            observer.disconnect(); // Stop observing the element's content\n            console.log('Content fully loaded, processing markdown for:', element);\n\n            // Convert the markdown content to HTML\n            convertMarkdownToHTML(element);\n        }, DEBOUNCE_DELAY);\n    };\n\n    // Create a MutationObserver to monitor content changes within the element\n    const contentObserver = new MutationObserver(contentObserverCallback);\n\n    // Start observing the element for character data changes and child node additions/removals\n    contentObserver.observe(element, {\n        childList: true,\n        characterData: true,\n        subtree: true,\n    });\n}\n\nfunction hasAssistantSibling(element) {\n    const parent = element.parentElement;\n    if (parent) {\n        const siblings = Array.from(parent.children);\n        for (const sibling of siblings) {\n            if (\n                sibling !== element &&\n                sibling.classList.contains('v9phc') &&\n                sibling.textContent.trim() === 'assistant'\n            ) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n// Handle new target divs by setting up a content monitor for each\nfunction handleNewTargetDivs(elements) {\n    elements.forEach(element => {\n        if (!element.__monitoringStarted) { // Avoid setting up multiple observers for the same element\n            // Check if the element meets the new condition\n            if (hasAssistantSibling(element)) {\n                element.__monitoringStarted = true;\n                console.log('Found a new target div with matching sibling. Starting to monitor content:', element);\n\n                // Start monitoring the element's content until it's fully loaded\n                monitorStreamingContent(element);\n            } else {\n                console.log('Div does not have the required sibling, skipping:', element);\n            }\n        }\n    });\n}\n\n// Set up the main observer to detect new target divs added to the DOM\nfunction setupMainObserver() {\n    const mainObserver = new MutationObserver(mutationsList => {\n        mutationsList.forEach(mutation => {\n            if (mutation.type === 'childList') {\n                mutation.addedNodes.forEach(node => {\n                    // Only process element nodes\n                    if (node.nodeType === Node.ELEMENT_NODE) {\n                        let targetElements = [];\n\n                        // Check if the node itself matches the target selector\n                        if (node.matches && node.matches(target_div)) {\n                            targetElements.push(node);\n                        }\n\n                        // Check for any descendants that match the target selector\n                        targetElements = targetElements.concat(Array.from(node.querySelectorAll(target_div)));\n\n                        // Handle the new target divs\n                        handleNewTargetDivs(targetElements);\n                    }\n                });\n            }\n        });\n    });\n\n    // Observe the body for added nodes in the subtree\n    const body = document.body;\n    if (body) {\n        mainObserver.observe(body, {\n            childList: true,\n            subtree: true, // Monitor additions/removals in the entire subtree\n        });\n\n        // Initial scan for target divs already present in the DOM\n        const initialTargetDivs = document.querySelectorAll(target_div);\n        handleNewTargetDivs(Array.from(initialTargetDivs));\n    } else {\n        console.error('Document body not found. Observer cannot be set up.');\n    }\n}\n\n// Add a message listener to handle toggle requests\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    if (request.action === \"toggleMarkdown\") {\n        // **Update the global toggle state**\n        isParsingToggledOff = !isParsingToggledOff; // Flip the global toggle state\n\n        // Toggle the content of all processed elements\n        processedElements.forEach(element => {\n            if (isParsingToggledOff) {\n                // Parsing is toggled off globally; show original element, hide parsed markdown\n                element.style.display = '';\n                if (element.__parsedDiv) {\n                    element.__parsedDiv.style.display = 'none';\n                }\n                element.__isMarkdownToggled = true;\n\n                // Start monitoring the original element for changes\n                monitorOriginalElementForChanges(element);\n            } else {\n                // Parsing is toggled on globally; show parsed markdown, hide original element\n                element.style.display = 'none';\n                if (element.__parsedDiv) {\n                    element.__parsedDiv.style.display = '';\n                }\n                element.__isMarkdownToggled = false;\n\n                // Disconnect the observer on the original element to prevent unnecessary processing\n                if (element.__editObserver) {\n                    element.__editObserver.disconnect();\n                    element.__editObserver = null;\n                }\n            }\n        });\n        sendResponse({ status: \"toggled\" });\n    }\n});\n\n// Initialize the extension once the DOM is fully loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    console.log('Extension initialized, setting up observers.');\n    setupMainObserver();\n});"],"names":["_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","_defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape$1","html","encode","test","replace","caret","edit","regex","opt","obj","name","val","valSource","getRegex","cleanUrl","href","encodeURI","noopTest","exec","splitCells","tableRow","count","cells","match","offset","str","escaped","curr","split","i","trim","shift","length","pop","splice","push","rtrim","c","invert","l","suffLen","currChar","charAt","slice","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","_Tokenizer","options","rules","constructor","this","space","src","block","newline","code","codeBlockStyle","fences","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","indentCodeCompensation","lang","inline","anyPunctuation","heading","trimmed","depth","hr","blockquote","lines","inBlockquote","currentLines","currentRaw","currentText","top","blockTokens","lastToken","oldToken","newText","newToken","substring","list","bull","isordered","ordered","start","loose","items","itemRegex","endsWithBlankLine","endEarly","itemContents","line","t","repeat","nextLine","blankLine","indent","trimStart","search","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","htmlBeginRegex","rawLine","nextLineWithoutTabs","ischecked","istask","task","checked","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","toLowerCase","table","headers","aligns","rows","item","header","align","row","cell","lheading","paragraph","escape","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","b","indexOf","level","findClosingBracket","linkLen","reflink","links","nolink","emStrong","maskedSrc","prevChar","emStrongLDelim","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","emStrongRDelimAst","emStrongRDelimUnd","lastIndex","lastCharLength","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","bullet","_paragraph","_blockLabel","_tag","_comment","blockNormal","gfmTable","blockGfm","blockPedantic","_punctuation","_inlineComment","_inlineLabel","inlineNormal","blockSkip","reflinkSearch","inlinePedantic","inlineGfm","inlineBreaks","normal","_Lexer","inlineQueue","Object","create","static","lex","next","lastParagraphClipped","cutSrc","extTokenizer","call","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","_Renderer","parser","langString","parse","parseInline","body","j","listitem","itemBody","checkbox","unshift","tablecell","tablerow","k","content","strong","em","cleanHref","out","image","_TextRenderer","_Parser","textRenderer","anyToken","renderers","genericToken","ret","textToken","_Hooks","Set","preprocess","markdown","postprocess","processAllTokens","provideLexer","lexInline","provideParser","markedInstance","defaults","setOptions","parseMarkdown","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","args","use","callback","values","concat","tableToken","listToken","childTokens","flat","pack","opts","ext","prevRenderer","apply","extLevel","prop","rendererProp","rendererFunc","tokenizerProp","tokenizerFunc","prevTokenizer","hooksProp","hooksFunc","prevHook","passThroughHooks","has","arg","Promise","resolve","then","packWalktokens","blockType","origOpt","throwError","onError","prototype","toString","all","catch","e","message","msg","reject","marked","getDefaults","target_div","DEBOUNCE_DELAY","processedElements","isParsingToggledOff","monitorOriginalElementForChanges","element","__editObserver","disconnect","observer","MutationObserver","mutationsList","clearTimeout","__editDebounceTimer","setTimeout","log","markdownContent","innerText","textContent","startsWith","htmlContent","__parsedDiv","innerHTML","querySelectorAll","style","fontSize","codeElem","width","updateParsedMarkdown","observe","characterData","subtree","childList","monitorStreamingContent","debounceTimer","contentObserver","__processed","__originalElement","parsedDiv","document","createElement","className","display","parentNode","insertBefore","nextSibling","__isMarkdownToggled","convertMarkdownToHTML","handleNewTargetDivs","elements","__monitoringStarted","parent","parentElement","_i","_siblings","Array","from","children","sibling","classList","contains","hasAssistantSibling","chrome","runtime","onMessage","addListener","request","sender","sendResponse","action","status","addEventListener","mainObserver","mutation","addedNodes","nodeType","Node","ELEMENT_NODE","targetElements","matches","initialTargetDivs","setupMainObserver"],"sourceRoot":""}